{
    "collab_server" : "",
    "contents" : "#### NAME: compareBoxplot\n#### DESCRIPTION:\n####    This function makes given image brighter.\n#### ARGUMENTS:\n#### ## data: dataframe or tibble, data used to perform analysis\n#### ## country: string, name of the country in question\n#### ## country_colname: string, name of the data column that contains country name\n#### ## results_colname: string, name of the data column that contains test results\n#### ## question_colname: strin, name of he data column that contains answer to the layering question\n#### ## quest_title: string, printed name of the question\n#### ## results_title: string, printed name of the results\n#### ## show_flag: logical, should country flag be given in background (default=TRUE)\n#### ## flags_dir: string, directory to folder where flag pictures (.png) are stored; name of the file should <name_in_dataset>.png\n#### ## alpha: numeric, brightness level of the flag, if presented\n#### ## color_boxes: logical, should boxes be colored with intensity according to the number of answers in respective questions\n#### ## print_weights: logical, should percentage of answers be printed on the boxes\ncompareBoxplot <- function(\n    data, country, country_colname, results_colname, question_colname,\n    quest_title, results_title, show_flag, flags_dir, alpha, color_boxes, print_weights\n){\n    data <- changeColnames(data,\n                           oldNames = c(country_colname, results_colname, question_colname),\n                           newNames = c(\"cnt\", \"results\", \"question\"))\n    \n    img <- readPNG(paste0(flags_dir, country,\".png\"))\n    g <- rasterGrob(img, interpolate=TRUE) \n    \n    aggrs <- data %>% \n        filter(cnt==country) %>% \n        group_by(question) %>% \n        na.omit() %>% \n        summarize(m = median(results), n=n(), q=quantile(results,.75))\n    \n    ggplot(subset(data, !is.na(question) & cnt==country), aes(question, results, fill=question)) +\n    {if(show_flag) annotation_custom(rasterGrob(brighten(img, alpha), \n                                                width = unit(1,\"npc\"), \n                                                height = unit(1,\"npc\"),\n                                                gp=gpar(alpha=.5)), \n                                     -Inf, Inf, -Inf, Inf)} +\n        geom_boxplot() +\n        scale_fill_manual(values=ntocolor(aggrs$n, use=color_boxes)) +\n        guides(fill=FALSE) +\n        {if(print_weights) geom_text(data=aggrs, aes(x=aggrs$question, y=(aggrs$m+aggrs$q)/2, \n                                                     label=boxlab(aggrs$n)))} +\n        theme(plot.title = element_text(size=22, lineheight=1.5, face=\"bold\", hjust=.5),\n              axis.title.y = element_text(size=19, margin=margin(0,10,0,0), lineheight=1.7, face=\"bold\", hjust=.5)) +\n        labs(x = quest_title, y=results_title) +\n        coord_flip()\n}\n\n#### NAME: compareDensity\n#### DESCRIPTION:\n####    This function makes given image brighter.\n#### ARGUMENTS:\n#### ## data: dataframe or tibble, data used to perform analysis\n#### ## country: string, name of the country in question\n#### ## country_colname: string, name of the data column that contains country name\n#### ## results_colname: string, name of the data column that contains test results\n#### ## question_colname: strin, name of he data column that contains answer to the layering question\n#### ## quest_title: string, printed name of the question\n#### ## results_title: string, printed name of the results\n#### ## show_flag: logical, should country flag be given in background (default=TRUE)\n#### ## flags_dir: string, directory to folder where flag pictures (.png) are stored; name of the file should <name_in_dataset>.png\n#### ## alpha: numeric, brightness level of the flag, if presented\n#### ## legend_position: string, position of the legend (\"top\",\"bottom\", etc.)\ncompareDensity <- function(\n    data, country, country_colname, results_colname, question_colname,\n    quest_title, results_title, show_flag, flags_dir, alpha, legend_position\n){\n    data <- changeColnames(data,\n                           oldNames = c(country_colname, results_colname, question_colname),\n                           newNames = c(\"cnt\", \"results\", \"question\"))\n    \n    img <- readPNG(paste0(flags_dir, country,\".png\"))\n    g <- rasterGrob(img, interpolate=TRUE) \n    \n    return(\n        ggplot(subset(data, !is.na(question) & cnt==country), aes(results)) +\n        {if(show_flag) annotation_custom(rasterGrob(brighten(img, alpha), \n                                                    width = unit(1,\"npc\"), \n                                                    height = unit(1,\"npc\"),\n                                                    gp=gpar(alpha=.5)), \n                                         -Inf, Inf, -Inf, Inf)} +\n            geom_line(stat=\"density\", lwd=1, aes(colour=question)) +\n            # guides(color=guide_legend(title=question_title)) + \n            guides(color=FALSE) + \n            theme(plot.title = element_text(size=22, lineheight=1.5, face=\"bold\", hjust=.5),\n                  axis.text.y = element_blank(), axis.ticks.y = element_blank(),\n                  legend.position = legend_position) +\n            labs(x = results_title, y=NULL) + scale_color_manual(values=c(\"blue\", \"red\"))\n    )\n}\n###### Compare Rank\n\ncompareRank <- function(country, meansPerCountry){\n    meansPerCountry$rozmiar <- ifelse(meansPerCountry$cnt == country, 3, 1)\n    cols <- c(\"1\", \"2\")[(meansPerCountry$cnt == country) + 1]\n    \n    ggplot(meansPerCountry, aes(m, 0, size = rozmiar)) +\n        geom_point(aes(colour = cols)) +\n        scale_color_manual(\"Country\", values = c(\"blue4\", \"orangered3\")) + \n        labs(title = NULL, y=NULL, x=NULL) + \n        theme_classic()+\n        theme(legend.position=\"none\", axis.ticks.y=element_blank(),axis.text.y = element_blank(), axis.line=element_blank()) +\n        coord_fixed(ratio=10)\n}\n\n\n\n#### NAME: brighten\n#### DESCRIPTION:\n####    This function makes given image brighter.\n#### ARGUMENTS:\n#### ## img: object of type nativeRaster, as returned by readPNG {png} function\n#### ## alpha: degree of brightening\nbrighten <- function(img, alpha){\n    return( (img + alpha)/(1+alpha) )\n}\n\n#### NAME: lab\n#### DESCRIPTION:\n####    This function defines, how the labels of boxplot should be formatted\n#### ARGUMENTS:\n#### ## count: a vector of counts\nboxlab <- function(count){\n    normalise <- count/sum(count)\n    rounded <- round(normalise, 2)\n    return(\n        paste0( 100*rounded, \"%\")\n    )\n}\n\n#### NAME: ntocolor\n#### DESCRIPTION:\n####    This function gives RGB color names basing on vector of counts\n#### ARGUMENTS:\n#### ## count: a vector of counts\n#### ## use: logical; if false, the result is a vector of whites\nntocolor <- function(count, use){\n    normalise <- count/sum(count)\n    vol <- 256 - round(256*normalise)\n    colcode <- toupper( as.hexmode(vol) )\n    if(use){\n        result <- paste0( \"#FF\", colcode, colcode )\n    } else {\n        result <- replicate(length(count), \"#FFFFFF\")\n    }\n    \n    return(\n        result\n    )\n}\n\n#### NAME: changeColnames\n#### DESCRIPTION:\n####    This function changes column names in a datframe\n#### ARGUMENTS:\n#### ## data: a dataframe\n#### ## oldNames: vector of strings, old column names\n#### ## newNames: vector of strings, new column names\nchangeColnames <- function( data, oldNames, newNames ){\n    idx <- sapply( oldNames, function(nm){ (1:ncol(data))[colnames(data)==nm] } )\n    colnames(data)[ idx ] <- newNames\n    return(data)\n}\n\n#### NAME: toTeXnames\n#### DESCRIPTION:\n####    This function creates an appropriate link to an artifact in the archivist Remote Repo\n#### ARGUMENTS:\n#### ## GITusername: self-explanatory\n#### ## GITrepo: self-explanatory\n#### ## MD5: md5 code of the artifact, created by the archivist::asave function\nMD5title <- function(GITusername, GITrepo, MD5){\n    paste0(\"\\\\verb|aread(\\\"\", GITusername, \"/\", GITrepo, \"/\", MD5, \"\\\")|\")\n}\n\n#### NAME: ggsaveInLatexLoop\n#### DESCRIPTION:\n####    This function helps to save ggplots to a file in Sweave loop (ggsave just don't work)\n#### ARGUMENTS:\n#### ## GITusername: self-explanatory\n#### ## GITrepo: self-explanatory\n#### ## MD5: md5 code of the artifact, created by the archivist::asave function\nggsaveInLatexLoop <- function(myplot, file1, width, height){\n    postscript(file=file1, paper=\"special\", width=width, height=height)\n    print( myplot )\n    dev.off()\n}\n\n#### NAME: GITpushAndCommit\n#### DESCRIPTION:\n####    This function perform communication with github\n#### ARGUMENTS:\n#### ## GITusername: self-explanatory\n#### ## GITrepo: self-explanatory\nGITpushAndCommit <- function(GITrepo, GITusername){\n    committext <- paste0(\"cd \", GITrepo, \"; git add .; git commit -m \\\"No message\\\"\")\n    system(committext)\n    pushtext <- paste0(\"cd \", GITrepo, \"; git push https://\", GITusername, \":\",\n           GITpassword, \"@github.com/\", GITusername, \"/\",\n           GITrepo, \".git --all\")\n    system(pushtext)\n}\n\n#### NAME: TeX______\n#### DESCRIPTION:\n####    The set of functions that print TeX parts of the report\nTeXpackages <- function(){\n    cat(\"\n    \\\\documentclass{beamer}\n    \\\\usepackage{graphicx}\n    \\\\usepackage{Sweave}\n    \\\\usepackage{multicol}\n    \\\\usepackage{tikz}\n    \\\\usepackage{caption}\n    \")\n}\n\nTeXtheme <- function(){\n    cat(\"\n    \\\\setbeamertemplate{caption}{\\\\raggedright\\\\insertcaption\\\\par}\n    \\\\usepackage[font={small}]{caption}\n    \\\\usetheme{Madrid}\n    \\\\usecolortheme{default}\n    \\\\setbeamertemplate{caption}[default]\n    \\\\makeatletter\n    \\\\setbeamertemplate{frametitle}\n    {\n        \\\\ifbeamercolorempty[bg]{frametitle}{}{\\\\nointerlineskip}\n        \\\\@tempdima=\\\\textwidth\n        \\\\advance\\\\@tempdima by\\\\beamer@leftmargin\n        \\\\advance\\\\@tempdima by\\\\beamer@rightmargin\n        \\\\vskip1ex\n        \\\\begin{beamercolorbox}[sep=8pt,center,colsep=-4bp,rounded=true]{frametitle}\n            \\\\usebeamerfont{frametitle}\n            \\\\vbox{}\\\\vskip-1ex\n            \\\\if@tempswa\\\\else\\\\csname beamer@ftecenter\\\\endcsname\\\\fi\n            \\\\strut\\\\insertframetitle\\\\strut\\\\par\n            {\n                \\\\ifx\\\\insertframesubtitle\\\\@empty\n                \\\\else\n                {\\\\usebeamerfont{framesubtitle}\\\\usebeamercolor[fg]{framesubtitle}\\\\insertframesubtitle\\\\strut\\\\par}%\n                \\\\fi\n            }\n            \\\\vskip-1ex\n            \\\\if@tempswa\\\\else\\\\vskip-.3cm\\\\fi\n        \\\\end{beamercolorbox}\n    }\n    \\\\makeatother\n    \\\\setbeamertemplate{caption}{\\\\raggedright\\\\insertcaption\\\\par}\n    \")\n}\n\nTeXbasicdata <- function(){\n    cat(\"\n    \\\\title{I love math but does she love me?}\n    \\\\subtitle{The analysis of PISA 2012 dataset.}\n    \\\\author[M. Futrega, \\\\L. Rajkowski]{Micha\\\\l\\\\ Futrega and \\\\L ukasz Rajkowski}\n    \\\\institute[MIM UW]{Faculty of Mathematics, University of Warsaw}\n    \\\\date{\\\\today}\n    \")\n}\n\nTeXbutton <- function(){\n    cat(\"\n    \\\\setbeamertemplate{section in toc}{\\\\inserttocsectionnumber.~\\\\inserttocsection}\n    \\\\beamertemplatenavigationsymbolsempty\n    \n    \\\\newcommand\\\\AddButton{\n    \\\\setbeamertemplate{background canvas}{\n    \\\\begin{tikzpicture}[remember picture,overlay]\n    \\\\node[anchor=west] at ([yshift=20pt,xshift=1em]current page.south west)\n      {\\\\hyperlink{toc}{\\\\beamergotobutton{Table of contests}}};\n    \\\\end{tikzpicture}\n      }\n    }\n    \")\n}\n\nTeXtitlepage <- function(){\n    cat(\"\n    \\\\begin{document}\n    \\\\begin{frame}\n        \\\\titlepage\n        \\\\center{\\\\footnotesize We observed that countries where the affection to mathematics \ngoes hand in hand with test results is ranked higher than country where there is no such correlation. \n}\n    \\\\end{frame}\n    \")\n}\n\nTeXTOC <- function(){\n    cat(\"\n    \\\\begin{frame}[label=toc] \n    \\\\frametitle{List of countries} \n    \\\\begin{multicols}{4}\n    \\\\scriptsize\n    \\\\tableofcontents\n    \\\\end{multicols}\n    \\\\end{frame}\n    \")\n}\n\nTeXcountrySummary <- function(\n    country, file1, file2, file3,\n    GITusername, GITrepo, \n    thisCountryBoxplotMD5, thisCountryDensityMD5, thisCountryRankPlotMD5,\n    arepo_fontsize\n){\n    cat(\"\\\\AddButton\")\n    cat(\"\\\\section{\", country, \"}\")\n    cat(\"\\\\begin{frame}[t, fragile=singleslide]\")\n    cat(\"\\\\frametitle{\", country, \"}\")\n    \n    cat(\"\\\\vspace*{-.4cm}\")\n    cat(\"\\\\begin{figure}\")\n    cat(\"\\\\begin{minipage}[t]{.52\\\\textwidth}\")\n    cat(\"\\\\centering\")\n    cat(\"\\\\includegraphics[width=3.2cm, angle=270]{\", file1, \"}\", sep=\"\")\n    cat(\"\\\\caption*{\\\\scriptsize \n        {\\\\bf Boxplots} of the test score.\n        The number on the box is the percentage of students within the group.\n        It is also indicated by the fill.}\")\n    cat(\"\\\\vspace{-.4cm}\")\n    cat(\"\\\\fontsize{\", arepo_fontsize, \"}{\", 1.2*arepo_fontsize, \"}\", MD5title(GITusername, GITrepo, thisCountryBoxplotMD5))\n    cat(\"\\\\end{minipage}\")\n    cat(\"\\\\begin{minipage}[t]{.44\\\\textwidth}\")\n    cat(\"\\\\centering\")\n    cat(\"\\\\includegraphics[width=3.2cm, angle=270]{\", file2, \"}\", sep=\"\")\n    cat(\"\\\\caption*{\\\\scriptsize \n        {\\\\bf Density estimation} of the test score within the groups of \n        {\\\\color{red} (strong) likers} and {\\\\color{blue}(strong) dislikers}.}\")\n    cat(\"\\\\vspace{-.4cm}\")\n    cat(\"\\\\fontsize{\", arepo_fontsize, \"}{\", 1.2*arepo_fontsize, \"}\", MD5title(GITusername, GITrepo, thisCountryDensityMD5))\n    cat(\"\\\\end{minipage}\")\n    cat(\"\\\\\\\\\")\n    cat(\"\\\\vspace{-2.5cm}\")\n    cat(\"\\\\end{figure}\")\n    \n    cat(\"\\\\begin{figure}\")\n    cat(\"\\\\centering \\\\includegraphics[width=6.0cm, height=10.0cm, angle=270]{\", file3, \"}\", sep=\"\")\n    cat(\"\\\\vspace{-2.5cm}\")\n    cat(\"\\\\caption*{\\\\scriptsize\", country, \" mean score is \\\\ {\\\\Large\\\\bf\\\\color{red}\",  \n        thisCountryRank, \"} out of \", max_rank, \" countries}\")\n    cat(\"\\\\vspace*{-.4cm}\")\n    cat(\"\\\\fontsize{\", arepo_fontsize, \"}{\", 1.2*arepo_fontsize, \"}\", MD5title(GITusername, GITrepo, thisCountryRankPlotMD5))\n    cat(\"\\\\end{figure}\")\n    cat(\"\\\\end{frame}\")\n}\n\n# save! -------------------------------------------------------------------\n\nsave(file=\"functions.RData\", compareDensity, compareBoxplot, compareRank, changeColnames, \n     ntocolor, boxlab, brighten, MD5title, ggsaveInLatexLoop, GITpushAndCommit,\n     TeXpackages, TeXtheme, TeXbasicdata, TeXbutton, TeXtitlepage, TeXTOC, TeXcountrySummary)\n",
    "created" : 1509901337862.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3047065378",
    "id" : "FA651982",
    "lastKnownWriteTime" : 1509913659,
    "last_content_update" : 1509913659658,
    "path" : "~/Dropbox/RiWizualizacja/project1/functions.R",
    "project_path" : "functions.R",
    "properties" : {
        "marks" : "<:197,0\n>:197,0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}